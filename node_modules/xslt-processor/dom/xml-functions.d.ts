import { XNode } from './xnode';
import { XDocument } from './xdocument';
import { XmlOutputOptions } from './xml-output-options';
/**
 * Returns the text value of a node; for nodes without children this
 * is the nodeValue, for nodes with children this is the concatenation
 * of the value of all children. Browser-specific optimizations are used by
 * default; they can be disabled by passing "true" in as the second parameter.
 * @param node The Node (not exactly a `XNode` here).
 * @param disallowBrowserSpecificOptimization A boolean, to avoid browser optimization.
 * @returns The XML value as a string.
 */
export declare function xmlValue(node: XNode, disallowBrowserSpecificOptimization?: boolean): string;
/**
 * The older version to obtain a XML value from a node.
 * For now, this form is only used to get text from attribute nodes,
 * and it should be removed in future versions.
 * @param node The attribute node.
 * @param disallowBrowserSpecificOptimization A boolean, to avoid browser optimization.
 * @returns The XML value as a string.
 */
export declare function xmlValueLegacyBehavior(node: XNode, disallowBrowserSpecificOptimization?: boolean): string;
/**
 * Returns the representation of a node as XML text.
 * In general it is not used by XSLT, that uses `xmlTransformedText` instead.
 * @param {XNode} node The starting node.
 * @param {XmlOutputOptions} options XML output options.
 * @returns The XML string.
 * @see xmlTransformedText
 */
export declare function xmlText(node: XNode, options?: XmlOutputOptions): string;
/**
 * Returns the representation of a node as XML text.
 * @param {XNode} node The starting node.
 * @param {XmlOutputOptions} options XML output options.
 * @returns The XML string.
 */
export declare function xmlTransformedText(node: XNode, options?: XmlOutputOptions): string;
/**
 * Replaces HTML/XML entities to their literal characters.
 * Currently implementing only tag delimiters.
 * @param text The text to be transformed.
 * @returns The unescaped text.
 */
export declare function xmlUnescapeText(text: string): string;
/**
 * Escape XML special markup characters: tag delimiter <, >, and entity
 * reference start delimiter &. The escaped string can be used in XML
 * text portions (i.e. between tags).
 * @param s The string to be escaped.
 * @returns The escaped string.
 */
export declare function xmlEscapeText(s: string): string;
/**
 * Wrapper function to access attribute values of template element
 * nodes. Currently this calls he.decode because in some DOM
 * implementations the return value of node.getAttributeValue()
 * contains unresolved XML entities, although the DOM spec requires
 * that entity references are resolved by the DOM.
 * @param node TODO
 * @param name TODO
 * @returns TODO
 */
export declare function xmlGetAttribute(node: XNode, name: string): string;
/**
 * Wrapper function to access the owner document uniformly for document
 * and other nodes: for the document node, the owner document is the
 * node itself, for all others it's the ownerDocument property.
 *
 * @param {XNode} node
 * @return {XDocument}
 */
export declare function xmlOwnerDocument(node: XNode): XDocument;
