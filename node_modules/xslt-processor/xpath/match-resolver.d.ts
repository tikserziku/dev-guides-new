import { XNode } from "../dom";
import { ExprContext } from "./expr-context";
import { Expression } from "./expressions/expression";
/**
 * Class that resolves XPath expressions, returning nodes.
 */
export declare class MatchResolver {
    /**
     * This class entry point.
     * @param expression The expression to be resolved.
     * @param context The Expression Context
     * @returns An array of nodes.
     */
    expressionMatch(expression: Expression, context: ExprContext): XNode[];
    /**
     * Resolves a `LocationExpr`.
     * @param expression The Location Expression.
     * @param context The Expression Context.
     * @returns Either the results of a relative resolution, or the results of an
     *          absolute resolution.
     */
    private locationExpressionMatch;
    /**
     * Resolves a `UnionExpr`.
     * @param expression The Union Expression.
     * @param context The Expression Context.
     * @returns The concatenated result of evaluating the both sides of the expression.
     */
    private unionExpressionMatch;
    /**
     * Finds all the nodes through absolute XPath search, starting on
     * the #document parent node.
     * @param expression The Expression.
     * @param context The Expression Context.
     * @returns The list of found nodes.
     */
    private absoluteXsltMatchByDocumentNode;
    /**
     * Finds all the nodes through absolute xPath search, starting with the
     * first child of the #document node.
     * @param expression The Expression.
     * @param context The Expression Context.
     * @returns The list of found nodes.
     */
    private absoluteXsltMatch;
    /**
     * Tries to find relative nodes from the actual context position.
     * If found nodes are already in the context, or if they are children of
     * nodes in the context, they are returned.
     * @param expression The expression used.
     * @param context The Expression Context.
     * @returns The list of found nodes.
     */
    private relativeXsltMatch;
}
