"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterExpr = void 0;
var node_set_value_1 = require("../values/node-set-value");
var expression_1 = require("./expression");
var FilterExpr = /** @class */ (function (_super) {
    __extends(FilterExpr, _super);
    function FilterExpr(expr, predicate) {
        var _this = _super.call(this) || this;
        _this.expr = expr;
        _this.predicate = predicate;
        return _this;
    }
    FilterExpr.prototype.evaluate = function (context) {
        // the filter expression should be evaluated in its entirety with no
        // optimization, as we can't backtrack to it after having moved on to
        // evaluating the relative location path. See the testReturnOnFirstMatch
        // unit test.
        var flag = context.returnOnFirstMatch;
        context.setReturnOnFirstMatch(false);
        var nodes = this.expr.evaluate(context).nodeSetValue();
        context.setReturnOnFirstMatch(flag);
        for (var i = 0; i < this.predicate.length; ++i) {
            var nodes0 = nodes;
            nodes = [];
            for (var j = 0; j < nodes0.length; ++j) {
                var n = nodes0[j];
                if (this.predicate[i].evaluate(context.clone(nodes0, undefined, j)).booleanValue()) {
                    nodes.push(n);
                }
            }
        }
        return new node_set_value_1.NodeSetValue(nodes);
    };
    return FilterExpr;
}(expression_1.Expression));
exports.FilterExpr = FilterExpr;
//# sourceMappingURL=filter-expr.js.map