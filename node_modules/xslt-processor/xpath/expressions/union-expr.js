"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnionExpr = void 0;
var node_set_value_1 = require("../values/node-set-value");
var expression_1 = require("./expression");
var UnionExpr = /** @class */ (function (_super) {
    __extends(UnionExpr, _super);
    function UnionExpr(expr1, expr2) {
        var _this = _super.call(this) || this;
        _this.expr1 = expr1;
        _this.expr2 = expr2;
        return _this;
    }
    UnionExpr.prototype.evaluate = function (context) {
        var nodes1 = this.expr1.evaluate(context).nodeSetValue();
        var nodes2 = this.expr2.evaluate(context).nodeSetValue();
        var I1 = nodes1.length;
        for (var _i = 0, nodes2_1 = nodes2; _i < nodes2_1.length; _i++) {
            var n = nodes2_1[_i];
            var inBoth = false;
            for (var i1 = 0; i1 < I1; ++i1) {
                if (nodes1[i1] == n) {
                    inBoth = true;
                    i1 = I1; // break inner loop
                }
            }
            if (!inBoth) {
                nodes1.push(n);
            }
        }
        return new node_set_value_1.NodeSetValue(nodes1);
    };
    return UnionExpr;
}(expression_1.Expression));
exports.UnionExpr = UnionExpr;
//# sourceMappingURL=union-expr.js.map