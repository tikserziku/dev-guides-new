"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PathExpr = void 0;
var node_set_value_1 = require("../values/node-set-value");
var expression_1 = require("./expression");
var PathExpr = /** @class */ (function (_super) {
    __extends(PathExpr, _super);
    function PathExpr(filter, rel) {
        var _this = _super.call(this) || this;
        _this.filter = filter;
        _this.rel = rel;
        return _this;
    }
    PathExpr.prototype.evaluate = function (ctx) {
        var nodes = this.filter.evaluate(ctx).nodeSetValue();
        var nodes1 = [];
        if (ctx.returnOnFirstMatch) {
            for (var i = 0; i < nodes.length; ++i) {
                nodes1 = this.rel.evaluate(ctx.clone(nodes, undefined, i)).nodeSetValue();
                if (nodes1.length > 0) {
                    break;
                }
            }
            return new node_set_value_1.NodeSetValue(nodes1);
        }
        for (var i = 0; i < nodes.length; ++i) {
            var nodes0 = this.rel.evaluate(ctx.clone(nodes, undefined, i)).nodeSetValue();
            for (var ii = 0; ii < nodes0.length; ++ii) {
                nodes1.push(nodes0[ii]);
            }
        }
        return new node_set_value_1.NodeSetValue(nodes1);
    };
    return PathExpr;
}(expression_1.Expression));
exports.PathExpr = PathExpr;
//# sourceMappingURL=path-expr.js.map