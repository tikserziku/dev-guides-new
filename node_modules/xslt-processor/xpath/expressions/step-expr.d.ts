import { ExprContext } from '../expr-context';
import { NodeSetValue } from '../values/node-set-value';
import { Expression } from './expression';
import { XPath } from '../xpath';
import { PredicateExpr } from './predicate-expr';
export declare class StepExpr extends Expression {
    axis: any;
    nodeTest: any;
    predicate: any;
    hasPositionalPredicate: any;
    xPath: XPath;
    constructor(axis: any, nodeTest: any, xPath: XPath, opt_predicate?: any);
    /**
     * Determines whether a predicate expression contains a "positional selector".
     * A positional selector filters nodes from the nodeList input based on their
     * position within that list. When such selectors are encountered, the
     * evaluation of the predicate cannot be depth-first, because the positional
     * selector may be based on the result of evaluating predicates that precede
     * it.
     */
    private predicateExprHasPositionalSelector;
    private exprReturnsNumberValue;
    appendPredicate(predicateExpression: PredicateExpr): void;
    evaluate(context: ExprContext): NodeSetValue;
}
