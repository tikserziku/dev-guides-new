import { XDocument } from './xdocument';
/**
 * Original author: Steffen Meschkat <mesch@google.com> (the `xmlParse` function,
 * now `xmlStrictParse`).
 *
 * An XML parse and a minimal DOM implementation that just supports
 * the subset of the W3C DOM that is used in the XSLT implementation.
 */
export declare class XmlParser {
    regexEmpty: RegExp;
    XML10_TAGNAME_REGEXP: RegExp;
    XML10_ATTRIBUTE_REGEXP: RegExp;
    XML11_TAGNAME_REGEXP: RegExp;
    XML11_ATTRIBUTE_REGEXP: RegExp;
    lenientHtmlTags: string[];
    /**
     * The entry point for this parser.
     * It verifies whether the document seems to be HTML.
     * HTML is a special case if XML and it should be parsed differently.
     * @param xmlOrHtml The XML or HTML content to be parsed.
     * @returns A DOM document.
     */
    xmlParse(xmlOrHtml: string): XDocument;
    /**
     * Given an XNode, returns an object mapping prefixes to their corresponding namespaces in its scope.
     * Default namespace is treated as if its prefix were the empty string.
     * @param node The Node.
     * @returns An object with prefixes and namespace URLs.
     */
    private namespaceMapAt;
    /**
     * HTML needs to be parsed differently because it's a special case of XML.
     * Sources:
     *
     * - https://blog.teamtreehouse.com/to-close-or-not-to-close-tags-in-html5
     * @param htmlText The HTML text
     * @returns A DOM document.
     */
    private htmlParse;
    /**
     * Parses the given XML string with our custom, JavaScript XML parser.
     * @param xml The XML String.
     * @returns A XDocument.
     * @author Steffen Meschkat <mesch@google.com>
     */
    private xmlStrictParse;
}
